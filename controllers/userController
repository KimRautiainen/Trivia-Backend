"use strict";
const e = require("express");
// userController
const userModel = require("../models/userModel");
const bcrypt = require("bcryptjs");

const getUserList = async (req, res) => {
  try {
    const users = await userModel.getAllUsers();
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const getUser = async (req, res) => {
  const userId = Number(req.params.userId);
  if (!Number.isInteger(userId)) {
    res.status(400).json({
      location: "userController, getUser",
      error: 500,
      message: "invalid id",
    });
    return;
  }

  const [user] = await userModel.getUserById(userId);
  console.log("getUser", user);

  if (user) {
    res.json(user);
  } else {
    res.status(404).json({ message: "User not found." });
  }
};
const postUser = async (req, res) => {
  console.log("posting user", req.body, req.file);
  // Generate a salt with bcrypt
  const salt = await bcrypt.genSalt(10);
  // Hash the user's password using bcrypt and the generated salt
  const password = await bcrypt.hash(req.body.password, salt);
  // Create a new user object with the user's input values and the generated password and filename
  const newUser = {
    username: req.body.username,
    email: req.body.email,
    filename: req.file.filename,
    password: password,
    experiencePoints: 0,
    level: 1,
    maxXp: 100,
  };
  try {
    // Call the insertUser method on the userModel object with the new user object as the argument and store the result
    const result = await userModel.insertUser(newUser);
    res.status(201).json({ message: "User created" });
  } catch (error) {
    // If there is an error, log the error message and send a 500 status code and error message in JSON format to the client
    console.error("error", error.message);
    res.status(500).json({
      error: 500,
      message: error.message,
    });
  }
};
const putUser = async (req, res) => {
  try {
    const userId = req.body.id;
    if (!userId) {
      return res.status(400).json({ message: "User ID is required" });
    }

    const userUpdates = {};

    if (req.body.password) {
      const salt = await bcrypt.genSalt(10);
      userUpdates.password = await bcrypt.hash(req.body.password, salt);
    }

    const updatableFields = [
      "username",
      "email",
    ];
    updatableFields.forEach((field) => {
      if (req.body[field]) {
        userUpdates[field] = req.body[field];
      }
    });

    if (req.file) {
      userUpdates.filename = req.file.filename;
    } else if (req.body.sessionuser) {
      userUpdates.filename = req.body.sessionuser;
    }

    console.log(
      "Updating user ID " + userId + " with: " + JSON.stringify(userUpdates)
    );

    if (Object.keys(userUpdates).length === 0) {
      return res.status(400).json({ message: "No updates provided" });
    }

    const result = await userModel.modifyUser(userId, userUpdates);
    res.status(200).json({ message: "User modified" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Internal server error" });
  }
};
const deleteUser = async (req, res) => {
  try {
    const result = await userModel.deleteUser(req.params.userId);
    console.log(req.params);
    console.log(req.params.userId);
    res.status(200).json({ message: "User deleted" });
  } catch (e) {
    console.error("error", e.message);
    res.status(500).json({ message: "Internal server error" });
  }
};

const checkToken = (req, res) => {
  res.json({ user: req.user });
};
const checkUsername = async (req, res) => {
  try {
    const username = req.body.username;
    const result = await userModel.checkUsername(username);
    res.status(200).json({ available: result.length === 0 });
  } catch (error) {
    console.error("error", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
};

const checkEmail = async (req, res) => {
  try {
    const email = req.body.email;
    const result = await userModel.checkEmail(email);
    res.status(200).json({ available: result.length === 0 });
  } catch (error) {
    console.error("error", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
};

// User level controlling

const getUserLevel = async (req, res) => {};
const putUserLevel = async (req, res) => {};
const putUserXp = async (req, res) => {
  try {
    const result = await userModel.addUserXp(req.params.userId, req.body.xp);
    console.log("userId from req.params: ", req.params.userId);
    console.log("xp from req.body: ", req.body.xp);

    res.status(200).json({ message: "Xp added" });
  } catch (e) {
    console.error("error", e.message);
    res.status(500).json({ message: "Internal server error" });
  }
};
// User achievements controlling

// Shows all achievents that can be earned
const getAllAchievements = async (req, res) => {
  try {
    const achievements = await userModel.getAllAchievements();
    res.json(achievements);
  } catch (error) {
    res
      .status(500)
      .json({ location: "UserController", message: error.message });
  }
};

// Show users earned achievements
const getUserAchievements = async (req, res) => {
  const userId = Number(req.params.userId);
  if (!Number.isInteger(userId)) {
    res.status(400).json({ error: 500, message: "invalid id" });
    return;
  } else {
    try {
      const achievements = await userModel.getUserAchievements(userId);
      res.json(achievements);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
};
const postUserAchievements = async (req, res) => {
  // Assuming you're passing userId and achievementId in the request body
  // Validate and sanitize these inputs as necessary
  const achievementId = req.body.achievementId;
  const userId = req.params.userId;
  // Basic validation
  if (!userId || !achievementId) {
    res.status(400).json({ message: "Missing userId or achievementId" });
    return;
  }

  try {
    // Call the model function
    const result = await userModel.insertUserAchievement(userId, achievementId);

    // If the insertion is successful, result should contain information about the operation
    // You can customize the response based on your requirement
    res.status(201).json({ message: "Achievement added successfully", result });
  } catch (error) {
    // Handle specific errors (e.g., duplicate entry) based on your application logic
    console.error("Error in insertUserAchievementController", error.message);
    res.status(500).json({ message: "Error adding achievement" });
  }
};

// Achievement progress controlling

const getUserAchievementProgress = async (req, res) => {
  try {
    const userId = req.params.userId; // Validate and sanitize this
    const achievementId = req.params.achievementId; // Validate and sanitize this
    const progress = await userModel.getAchievementProgress(
      userId,
      achievementId
    );
    res.json(progress);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const updateUserAchievementProgress = async (req, res) => {
  try {
    const userId = req.params.userId; // Validate and sanitize this
    const achievementId = req.params.achievementId; // Validate and sanitize this
    const { progress } = req.body; // Validate and sanitize this
    const result = await userModel.updateAchievementProgress(
      userId,
      achievementId,
      progress
    );
    res.status(200).json({ message: "Progress updated successfully", result });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const completeUserAchievement = async (req, res) => {
  try {
    const userId = req.params.userId; // Validate and sanitize this
    const achievementId = req.params.achievementId; // Validate and sanitize this
    const result = await userModel.completeAchievement(userId, achievementId);
    res
      .status(200)
      .json({ message: "Achievement completed successfully", result });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const userController = {
  getUserList,
  getUser,
  postUser,
  putUser,
  deleteUser,
  checkToken,
  putUserXp,
  getUserAchievements,
  getAllAchievements,
  postUserAchievements,
  getUserAchievementProgress,
  updateUserAchievementProgress,
  completeUserAchievement,
  checkUsername,
  checkEmail,
};
module.exports = userController;
